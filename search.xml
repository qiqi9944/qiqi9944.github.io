<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>函数调用时用到的寄存器</title>
    <url>/2020/05/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="函数调用所要进行的操作"><a href="#函数调用所要进行的操作" class="headerlink" title="函数调用所要进行的操作"></a>函数调用所要进行的操作</h2><hr>
<ul>
<li>EBP<br>EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。</li>
<li>ESP<br>ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。</span><br><span class="line">下一步，foo必须为它的局部变量分配空间，同时，也必须为它可能用到的一些临时变量分配空间。</span><br><span class="line">sub esp, 0cch；减去的值根据程序而定</span><br><span class="line">之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）</span><br><span class="line">之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了</span><br><span class="line">在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作</span><br></pre></td></tr></table></figure></li>
<li>EBX<br>EBX：”基地址”(base)寄存器, 在内存寻址时存放基地址。</li>
<li>ESI<br>ESI/EDI分别叫做”源/目标索引寄存器”(source/destination index),因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串.</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/TuxedoLinux/article/details/100921994" target="_blank" rel="noopener">https://blog.csdn.net/TuxedoLinux/article/details/100921994</a></p>
<p><a href="https://blog.csdn.net/zhu2695/article/details/16813425" target="_blank" rel="noopener">https://blog.csdn.net/zhu2695/article/details/16813425</a></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>七层协议</title>
    <url>/2020/05/12/%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h2><hr>
<ul>
<li>应用层<br>应用层：最靠近用户的一层，为用户提供接口和各种网络服务，HTTP HTTPS FTP POP3 SMTP等<br>Eg:A的老板想要发送一个财务分析报表，这个报表就是应用层提供的一种网络服务。</li>
<li>表示层<br>表示层：对应用层数据进行编码和转换，保证一系统的应用层发送的数据能够被另一个系统的应用层所识别。必要时可以其进行加密，压缩等。<br>Eg:例如AB两个公司用英语进行通信，表示层的作用就是传递的信息转换成英语，同时为了防止其他公司看到，会进行加密处理。</li>
<li>会话层<br>会话层：建立，管理终止，表示层之间的通信会话。<br>Eg：会话层接收到表示层发过来数据时，他会根据器信息建立并记录本次会话，他首先找到B公司的地址信息，然后将所有信息放在一个信封中，加上地址和电话号，将他寄出，等到B公司收到后会终止本次会话。</li>
<li>传输层<br>传输层：建立了主机端到端的链接，他的作用就是为上层提供端到端的服务。<br>Eg:就是公司中负责快递收发的人，公司自己的投递员，负责将上一层要传递的资料传递给邮局或公司。</li>
<li>网络层<br>网络层：通过ip寻址建立两点之间的链接，为远端运输层送来的数据进行分组，选择合适的路由和交换节点，正确无误的将地址传送个目的端的运输层。这一层就是ip层，也就是internet的基础。<br>Eg：网络层相当于快递公司的庞大快递网络，通过一些集散中心到达目的地，这里的集散器就是ip节点。</li>
<li>数据链路层<br>数据链路层：将比特组合成字节，将字节再组合成帧，使用链路层地址（以太网的mac地址）来访问介质，进行差错检测。<br>逻辑链路控制子层（LLC）和媒体访问控制子层（MAC）。</li>
<li>网络层<br>网络层：实现最终的信号传输，通过物理介质传送比特流。常用的设备有集线器，中继器，调制解调器，网线，双绞线，同轴电缆。<br>Eg交通工具相当于物理层，eg火车，飞机，汽车等。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
