<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>8259</title>
    <url>/2020/05/12/8259/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>网际控制报文协议 ICMP</title>
    <url>/2020/05/19/ICMP/</url>
    <content><![CDATA[<ul>
<li>为了提高 IP 数据报交付成功的机会，在网际层使用了网际控制报文协议 ICMP (Internet Control Message Protocol)。</li>
<li>ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。</li>
<li>ICMP 不是高层协议，而是 IP 层的协议。</li>
<li>ICMP 报文作为 IP 层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去。 </li>
</ul>
<pre><code>- ICMP 报文的种类有两种，即 ICMP 差错报告报文和 ICMP 询问报文。 
- ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。接着的 4 个字节的内容与 ICMP 的类型有关。 </code></pre><p><img src="/2020/05/19/ICMP/1.png" alt></p>
<h2 id="ICMP-差错报告报文共有-5-种"><a href="#ICMP-差错报告报文共有-5-种" class="headerlink" title="ICMP 差错报告报文共有 5 种"></a>ICMP 差错报告报文共有 5 种</h2><p>终点不可达<br>源点抑制(Source quench)<br>时间超过<br>参数问题<br>改变路由（重定向）(Redirect)<br><img src="/2020/05/19/ICMP/2.png" alt><br><img src="/2020/05/19/ICMP/3.png" alt></p>
<h2 id="ICMP-询问报文有两种"><a href="#ICMP-询问报文有两种" class="headerlink" title="ICMP 询问报文有两种"></a>ICMP 询问报文有两种</h2><p>回送请求和回答报文<br>时间戳请求和回答报文</p>
<h2 id="ICMP的应用举例PING"><a href="#ICMP的应用举例PING" class="headerlink" title="ICMP的应用举例PING"></a>ICMP的应用举例PING</h2><p>PING 用来测试两个主机之间的连通性。<br>PING 使用了 ICMP 回送请求与回送回答报文。<br>PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。 </p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>无分类编址 CIDR</title>
    <url>/2020/05/19/CIDR/</url>
    <content><![CDATA[<ul>
<li>CIDR 消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，因而可以更加有效地分配 IPv4 的地址空间。</li>
<li>CIDR使用各种长度的“网络前缀”(network-prefix)来代替分类地址中的网络号和子网号。</li>
<li>IP 地址从三级编址（使用子网掩码）又回到了两级编址。  </li>
</ul>
<h2 id="无分类的两级编址"><a href="#无分类的两级编址" class="headerlink" title="无分类的两级编址"></a>无分类的两级编址</h2><pre><code>无分类的两级编址的记法是： 
IP地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;}
CIDR 还使用“斜线记法”(slash notation)，它又称为CIDR记法，
即在 IP 地址面加上一个斜线“/”，然后写上网络前缀所占的位数（这个数值对应于三级编址中子网掩码中 1 的个数）。
CIDR 把网络前缀都相同的连续的 IP 地址组成“CIDR 地址块”。  </code></pre><p>128.14.32.0/20 表示的地址块共有 212 个地址（因为斜线后面的 20 是网络前缀的位数，所以这个地址的主机号是 12 位）。<br>这个地址块的起始地址是 128.14.32.0。<br>在不需要指出地址块的起始地址时，也可将这样的地址块简称为“/20 地址块”。<br>128.14.32.0/20 地址块的最小地址：128.14.32.0<br>128.14.32.0/20 地址块的最大地址：128.14.47.255<br>全 0 和全 1 的主机号地址一般不使用。</p>
<ul>
<li>CIDR 虽然不使用子网了，但仍然使用“掩码”这一名词（但不叫子网掩码）。</li>
<li>对于 /20  地址块，它的掩码是 20 个连续的 1。 斜线记法中的数字就是掩码中1的个数。</li>
<li>网络前缀的后面加一个星号 * 的表示方法,如 00001010 00*，在星号 * 之前是网络前缀，而星号 * 表示 IP 地址中的主机号，可以是任意值。</li>
</ul>
<h2 id="CIDR-地址块划分举例"><a href="#CIDR-地址块划分举例" class="headerlink" title="CIDR 地址块划分举例"></a>CIDR 地址块划分举例</h2><p><img src="/2020/05/19/CIDR/1.png" alt></p>
<h2 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h2><ul>
<li>使用 CIDR 时，路由表中的每个项目由“网络前缀”和“下一跳地址”组成。在查找路由表时可能会得到不止一个匹配结果。 </li>
<li>应当从匹配结果中选择具有最长网络前缀的路由：最长前缀匹配(longest-prefix matching)。</li>
<li>网络前缀越长，其地址块就越小，因而路由就越具体(more specific) 。</li>
<li>最长前缀匹配又称为最长匹配或最佳匹配。    </li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>地址解析协议 ARP</title>
    <url>/2020/05/18/arp/</url>
    <content><![CDATA[<h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>每一个主机都设有一个 ARP 高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。<br>ARP属于网络层，将IP地址传换成帧为数据链路层提供服务<br><img src="/2020/05/18/arp/1.png" alt><br>不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是必须使用硬件地址。<br>当主机 A 欲向本局域网上的某个主机 B 发送 IP 数据报时，就先在其 ARP 高速缓存中查看有无主机 B 的 IP 地址。</p>
<ul>
<li>如有，就可查出其对应的硬件地址，再将此硬件地址写入 MAC 帧，然后通过局域网将该 MAC 帧发往此硬件地址。 </li>
<li>如没有就需要进行ARP地址解析<ul>
<li>在同一局域网上面的地址解析<pre><code>通过广播进行获取，ARP请求分组里面有自己的IP地址和MAC地址，以及目的主机的IP地址。
局域网上的所有主机都会收到这个ARP请求，但是之后IP地址匹配的主机才会对他进行响应
会首先将自己的IP和MAC地址放入ARP响应中返回给源主机，并且会将这两个对应的MAC地址都写到缓存中，以备下次使用</code></pre></li>
<li>不在同一个局域网<pre><code>因为不在同一个局域网中，就说明会经过多个路由器，经过几个路由器就要进行（n+1）次地址解析，
每一次的首地址和目的地址都是传输的首尾，并且每经过一次传输，都会对请求进行拆分，重组，
但是每一次其中的IP数据报不会发生变化。</code></pre></li>
</ul>
<hr>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>CSMA/CD协议</title>
    <url>/2020/05/14/csma-cd%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="适配器的重要功能："><a href="#适配器的重要功能：" class="headerlink" title="适配器的重要功能："></a>适配器的重要功能：</h2><ul>
<li>进行串行/并行转换。</li>
<li>对数据进行缓存。</li>
<li>在计算机的操作系统安装设备驱动程序。</li>
<li>实现以太网协议。<br><strong>网络接口板又称为通信适配器或网络接口卡 NIC 或“网卡”。</strong></li>
</ul>
<p>最初的以太网是将许多计算机都连接到一根总线上。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p>
<pre><code>总线上的每一个工作的计算机都能检测到 B 发送的数据信号。 
由于只有计算机 D 的地址与数据帧首部写入的地址一致，因此只有 D 才接收这个数据帧。 
其他所有的计算机（A, C 和 E）都检测到不是发送给它们的数据帧，因此就丢弃这个数据帧而不能够收下来。
具有广播特性的总线上实现了一对一的通信。</code></pre><p> <img src="/2020/05/14/csma-cd%E5%8D%8F%E8%AE%AE/1.png" alt> </p>
<h2 id="以太网采取的两种重要的措施："><a href="#以太网采取的两种重要的措施：" class="headerlink" title="以太网采取的两种重要的措施："></a>以太网采取的两种重要的措施：</h2><ul>
<li>采用较为灵活的无连接的工作方式，即不必先建立连接就可以直接发送数据。 </li>
<li>以太网对发送的数据帧不进行编号，也不要求对方发回确认。<pre><code>- 这样做的理由是局域网信道的质量很好，因信道质量产生差错的概率是很小的。 </code></pre></li>
</ul>
<h2 id="以太网发送的数据都使用曼彻斯特-Manchester-编码"><a href="#以太网发送的数据都使用曼彻斯特-Manchester-编码" class="headerlink" title="以太网发送的数据都使用曼彻斯特(Manchester)编码"></a>以太网发送的数据都使用曼彻斯特(Manchester)编码</h2><p><img src="/2020/05/14/csma-cd%E5%8D%8F%E8%AE%AE/2.png" alt></p>
<h2 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA/CD"></a>CSMA/CD</h2><ul>
<li>“多点接入”表示许多计算机以多点接入的方式连接在一根总线上。</li>
<li>“载波监听”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。 <ul>
<li>总线上并没有什么“载波”。因此“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。  </li>
</ul>
</li>
<li>“碰撞检测”就是计算机边发送数据边检测信道上的信号电压大小。<pre><code>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。
当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。
所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。
每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。
当某个站监听到总线是空闲时，也可能总线并非真正是空闲的。 
A 向 B 发出的信息，要经过一定的时间后才能传送到 B。
B 若在 A 发送的信息到达 B 之前发送自己的帧(因为这时 B 的载波监听检测不到 A 所发送的信息)，则必然要在某个时间和 A 发送的帧发生碰撞。
碰撞的结果是两个帧都变得无用。  </code></pre><img src="/2020/05/14/csma-cd%E5%8D%8F%E8%AE%AE/3.png" alt></li>
</ul>
<hr>
<h2 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h2><ul>
<li>使用 CSMA/CD 协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）。</li>
<li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。 </li>
<li>这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。<pre><code>最先发送数据帧的站，在发送数据帧后至多经过时间（两倍的端到端往返时延）就可知道发送的数据帧是否遭受了碰撞。
以太网的端到端往返时延（两倍的端到端往返时延）称为争用期，或碰撞窗口。
经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</code></pre><pre><code>以太网取 51.2us 为争用期的长度。
对于 10 Mb/s 以太网，在争用期内可发送512 bit，即 64 字节,所以以太网最短的帧长为64字节。
以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。
以太网规定了最短有效帧长为 64 字节，凡长度小于 64 字节的帧都是由于冲突而异常中止的无效帧。</code></pre><h2 id="二进制指数类型退避算法"><a href="#二进制指数类型退避算法" class="headerlink" title="二进制指数类型退避算法"></a>二进制指数类型退避算法</h2>发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能再发送数据。<ul>
<li>基本退避时间取为争用期（两倍的端到端往返时延）。</li>
<li>从整数集合[0,1,…, (2k 1)]中随机地取出一个数，记为 r。重传所需的时延就是 r 倍的基本退避时间。</li>
<li>参数 k 按下面的公式计算：<pre><code>k = Min[重传次数, 10]</code></pre></li>
<li>当 k&lt;=10 时，参数 k 等于重传次数。</li>
<li>当重传达 16 次仍不能成功时即丢弃该帧，并向高层报告。 </li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/06/14/git/</url>
    <content><![CDATA[<ul>
<li>登录：<br>git config –global user.name “XXXXX”;<br>git config –global user.email “XXXX@XXXX”</li>
<li>克隆<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">克隆master:</span><br><span class="line">git clone 地址（.git）</span><br><span class="line">克隆分支：</span><br><span class="line">git clone -b 地址（.git）</span><br></pre></td></tr></table></figure></li>
<li>提交：<br>git add +文件名字<br>git add .<br>git add -f +文件名字</li>
<li>备注：<br>git commit -m “备注消息”</li>
<li>创建分支：<br>git branch +名字</li>
<li>切换分支：<br>git checkout +名字</li>
<li>切换与创建分支：<br>git checkout -b +名字</li>
<li>查看分支：<br>git branch</li>
<li>上传<br>git push origin + 分支名字/master</li>
<li>查看分支状态<br>git status</li>
<li>查看不同<br>git diff</li>
<li>拉下来<br>git pull</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>局域网</title>
    <url>/2020/05/14/c%E5%B9%BF%E6%92%AD/</url>
    <content><![CDATA[<h2 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h2><p><strong>局域网最主要的特点是</strong>：<br>     网络为一个单位所拥有，且地理范围和站点数目均有限。（不含有网络层，因为它不需要路由器）<br><strong>局域网具有如下的一些主要优点：</strong><br>     - 具有广播功能，从一个站点可很方便地访问全网。<strong>局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</strong><br>     - 便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。<br>     - 提高了系统的可靠性、可用性和残存性。<br>     - 将 802.3 局域网简称为“以太网”。<br><em>“以太网”应当是指符合 DIX Ethernet V2 标准的局域网</em> </p>
<hr>
<h2 id="局域网的拓扑"><a href="#局域网的拓扑" class="headerlink" title="局域网的拓扑"></a>局域网的拓扑</h2><p><img src="/2020/05/14/c%E5%B9%BF%E6%92%AD/pu.png" alt> <img src="/2020/05/14/c%E5%B9%BF%E6%92%AD/tuo.png" alt><br>我们物理上使用的星型拓扑，但是逻辑上仍然使用总线型。</p>
<hr>
<h2 id="数据链路层的两个子层"><a href="#数据链路层的两个子层" class="headerlink" title="数据链路层的两个子层"></a>数据链路层的两个子层</h2><p>为了使数据链路层能更好地适应多种局域网标准，将局域网的数据链路层拆成两个子层：</p>
<ul>
<li>逻辑链路控制 LLC (Logical Link Control)子层</li>
<li>媒体接入控制 MAC (Medium Access Control)子层。<pre><code>与接入到传输媒体有关的内容都放在 MAC子层,而 LLC 子层则与传输媒体无关
不管采用何种协议的局域网对 LLC 子层来说都是透明的</code></pre></li>
</ul>
<hr>
<h2 id="适配器的重要功能："><a href="#适配器的重要功能：" class="headerlink" title="适配器的重要功能："></a>适配器的重要功能：</h2><ul>
<li>进行串行/并行转换。</li>
<li>对数据进行缓存。</li>
<li>在计算机的操作系统安装设备驱动程序。</li>
<li>实现以太网协议。  </li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>IP数据报</title>
    <url>/2020/05/18/ip/</url>
    <content><![CDATA[<h2 id="IP数据包的格式"><a href="#IP数据包的格式" class="headerlink" title="IP数据包的格式"></a>IP数据包的格式</h2><p>一个 IP 数据报由首部和数据两部分组成。<br>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。<br>在首部的固定部分的后面是一些可选字段，其长度是可变的。<br><img src="/2020/05/18/ip/1.png" alt></p>
<ul>
<li>版本——占 4 位，指 IP 协议的版本目前的 IP 协议版本号为 4 (即 IPv4),版本号为6为IPv6(IPv6 占16个字节，IPv4占4个字节)</li>
<li>首部长度——占 4 位，可表示的最大数值是 15 个单位(一个单位为 4 字节)，因此 IP 的首部长度的最大值是 60 字节。</li>
<li>区分服务——占 8 位，用来获得更好的服务，在一般的情况下都不使用这个字段 。</li>
<li>总长度——占 16 位，指首部和数据之和的长度，单位为字节，因此数据报的最大长度为 65535 字节。总长度必须不超过最大传送单元 MTU。<br><img src="/2020/05/18/ip/4.png" alt></li>
<li>标识——占16位，它是一个计数器，用来产生数据报的标识。</li>
<li>标志——占3位，目前只有前两位有意义。标志字段的最低位是 MF (More Fragment)。MF=1 表示后面“还有分片”。MF=0 表示最后一个分片。标志字段中间的一位是 DF，只有当 DF=0 时才允许分片。 </li>
<li>片偏移——占13位指出：较长的分组在分片后某片在原分组中的相对位置。片偏移以8个字节为偏移单位。<br><img src="/2020/05/18/ip/2.png" alt></li>
<li>生存时间——占8位记为TTL，数据报在网络中可通过的路由器数的最大值。</li>
<li>协议——占8位字段指出此数据报携带的数据使用何种协议，以便目的主机的 IP 层将数据部分上交给哪个处理过程<br>icmp( 1 ) igmp( 2 ) ip( 4 ) tcp( 6 ) egp( 8 )  igp( 9 ) udp( 17 )<br><img src="/2020/05/18/ip/3.png" alt></li>
<li>首部检验和——占16位字段只检验数据报的首部不检验数据部分。这里不采用 CRC 检验码而采用简单的计算方法。 </li>
</ul>
<h2 id="IP-层转发分组的流程"><a href="#IP-层转发分组的流程" class="headerlink" title="IP 层转发分组的流程"></a>IP 层转发分组的流程</h2><ul>
<li>有四个 A 类网络通过三个路由器连接在一起。每一个网络上都可能有成千上万个主机。</li>
<li>可以想像，若按目的主机号来制作路由表，则所得出的路由表就会过于庞大。</li>
<li>但若按主机所在的网络地址来制作路由表，那么每一个路由器中的路由表就只包含 4 个项目。这样就可使路由表大大简化。 </li>
</ul>
<h2 id="查找路由表"><a href="#查找路由表" class="headerlink" title="查找路由表"></a>查找路由表</h2><p>根据目的网络地址就能确定下一跳路由器，这样做的结果是：<br>    - IP 数据报最终一定可以找到目的主机所在目的网络上的路由器（可能要通过多次的间接交付）。<br>    - 只有到达最后一个路由器时，才试图向目的主机进行直接交付。 </p>
<h2 id="特定主机路由"><a href="#特定主机路由" class="headerlink" title="特定主机路由"></a>特定主机路由</h2><ul>
<li>这种路由是为特定的目的主机指明一个路由。</li>
<li>采用特定主机路由可使网络管理人员能更方便地控制网络和测试网络，同时也可在需要考虑某种安全问题时采用这种特定主机路由。</li>
</ul>
<h2 id="默认路由"><a href="#默认路由" class="headerlink" title="默认路由"></a>默认路由</h2><ul>
<li>路由器还可采用默认路由以减少路由表所占用的空间和搜索路由表所用的时间。</li>
<li>这种转发方式在一个网络只有很少的对外连接时是很有用的。</li>
<li>默认路由在主机发送 IP 数据报时往往更能显示出它的好处。</li>
<li>如果一个主机连接在一个小网络上，而这个网络只用一个路由器和因特网连接，那么在这种情况下使用默认路由是非常合适的。 </li>
</ul>
<hr>
<h2 id="分组转发算法"><a href="#分组转发算法" class="headerlink" title="分组转发算法"></a>分组转发算法</h2><pre><code>(1)  从数据报的首部提取目的主机的 IP 地址 D, 得出目的网络地址为 N。
(2)  若网络 N 与此路由器直接相连，则把数据报直接交付目的主机 D；否则是间接交付，执行(3)。
(3)  若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行(4)。
(4)  若路由表中有到达网络 N 的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行(5)。
(5) 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行(6)。
(6)  报告转发分组出错。 </code></pre><hr>
<h2 id="从两级-IP-地址到三级-IP-地址"><a href="#从两级-IP-地址到三级-IP-地址" class="headerlink" title="从两级 IP 地址到三级 IP 地址"></a>从两级 IP 地址到三级 IP 地址</h2><p>这种做法叫作划分子网(subnetting) 。</p>
<ul>
<li>划分子网纯属一个单位内部的事情。单位对外仍然表现为没有划分子网的网络。</li>
<li>从主机号借用若干个位作为子网号 subnet-id，而主机号 host-id 也就相应减少了若干个位。<pre><code>当没有划分子网时，IP 地址是两级结构。
划分子网后 IP 地址就变成了三级结构。
划分子网只是把 IP 地址的主机号 host-id 这部分进行再划分，而不改变 IP 地址原来的网络号 net-id。</code></pre></li>
</ul>
<hr>
<h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h2><p>从一个 IP 数据报的首部并无法判断源主机或目的主机所连接的网络是否进行了子网划分。<br>使用子网掩码(subnet mask)可以找出 IP 地址中的子网部分。<br><img src="/2020/05/18/ip/5.png" alt></p>
<ul>
<li>子网掩码是一个网络或一个子网的重要属性。</li>
<li>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</li>
<li>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</li>
<li>若一个路由器连接在两个子网上就拥有两个网络地址和两个子网掩码。</li>
</ul>
<h2 id="使用子网掩码的分组转发过程"><a href="#使用子网掩码的分组转发过程" class="headerlink" title="使用子网掩码的分组转发过程"></a>使用子网掩码的分组转发过程</h2><pre><code>(1) 从收到的分组的首部提取目的 IP 地址 D。
(2) 先用各网络的子网掩码和 D 逐位相“与”，看是否和相应的网络地址匹配。若匹配，则将分组直接交付。否则就是间接交付，执行(3)。
(3) 若路由表中有目的地址为 D 的特定主机路由，则将分组传送给指明的下一跳路由器；否则，执行(4)。
(4) 对路由表中的每一行的子网掩码和 D 逐位相“与”，若其结果与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行(5)。
(5) 若路由表中有一个默认路由，则将分组传送给路由表中所指明的默认路由器；否则，执行(6)。
(6) 报告转发分组出错。
</code></pre>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>mac和网桥</title>
    <url>/2020/05/15/mac/</url>
    <content><![CDATA[<h2 id="使用集线器的星形拓扑"><a href="#使用集线器的星形拓扑" class="headerlink" title="使用集线器的星形拓扑"></a>使用集线器的星形拓扑</h2><p>以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做集线器(hub)  </p>
<ul>
<li>集线器是使用电子器件来模拟实际电缆线的工作，因此整个系统仍然像一个传统的以太网那样运行。 </li>
<li>使用集线器的以太网在逻辑上仍是一个总线网，各工作站使用的还是 CSMA/CD 协议，并共享逻辑上的总线。 </li>
<li>集线器很像一个多接口的转发器，工作在物理层。 （中继器也处于物理层）</li>
</ul>
<h2 id="以太网的-MAC-层"><a href="#以太网的-MAC-层" class="headerlink" title="以太网的 MAC 层"></a>以太网的 MAC 层</h2><ul>
<li>在局域网中，硬件地址又称为物理地址，或 MAC 地址。 MAC地址占用6个字节<br>适配器从网络上每收到一个 MAC 帧就首先用硬件检查 MAC 帧中的 MAC 地址.</li>
<li>如果是发往本站的帧则收下，然后再进行其他的处理。</li>
<li>否则就将此帧丢弃，不再进行其他的处理。</li>
</ul>
<h2 id="“发往本站的帧”包括以下三种帧："><a href="#“发往本站的帧”包括以下三种帧：" class="headerlink" title="“发往本站的帧”包括以下三种帧："></a>“发往本站的帧”包括以下三种帧：</h2><ul>
<li>单播(unicast)帧（一对一）</li>
<li>广播(broadcast)帧（一对全体）</li>
<li>多播(multicast)帧（一对多）</li>
</ul>
<h2 id="常用的以太网MAC帧格式有两种标准-："><a href="#常用的以太网MAC帧格式有两种标准-：" class="headerlink" title="常用的以太网MAC帧格式有两种标准 ："></a>常用的以太网MAC帧格式有两种标准 ：</h2><p>DIX Ethernet V2 标准<br>IEEE 的 802.3 标准<br>最常用的 MAC 帧是以太网 V2 的格式<br><img src="/2020/05/15/mac/mac.png" alt></p>
<pre><code>类型字段用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据上交给上一层的这个协议。
数据字段的正式名称是 MAC 客户数据字段
最小长度 64 字节-18 字节的首部和尾部 = 数据字段的最小长度 
在帧的前面插入的 8 字节中的第一个字段共 7 个字节，
是前同步码，用来迅速实现 MAC 帧的比特同步。
第二个字段是帧开始定界符，表示后面的信息就是MAC 帧
</code></pre><hr>
<h2 id="无效的-MAC-帧"><a href="#无效的-MAC-帧" class="headerlink" title="无效的 MAC 帧"></a>无效的 MAC 帧</h2><ul>
<li>数据字段的长度与长度字段的值不一致；</li>
<li>帧的长度不是整数个字节；</li>
<li>用收到的帧检验序列 FCS 查出有差错；</li>
<li>数据字段的长度不在 46 ~ 1500 字节之间。</li>
<li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li>
<li>对于检查出的无效 MAC 帧就简单地丢弃。以太网不负责重传丢弃的帧。 </li>
</ul>
<h2 id="在物理层用集线器扩展局域网"><a href="#在物理层用集线器扩展局域网" class="headerlink" title="在物理层用集线器扩展局域网"></a>在物理层用集线器扩展局域网</h2><p>优点</p>
<ul>
<li>使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信。</li>
<li>扩大了局域网覆盖的地理范围。</li>
</ul>
<p>缺点</p>
<ul>
<li>碰撞域增大了，但总的吞吐量并未提高。</li>
<li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。 </li>
</ul>
<h2 id="在数据链路层使用网桥扩展局域网"><a href="#在数据链路层使用网桥扩展局域网" class="headerlink" title="在数据链路层使用网桥扩展局域网"></a>在数据链路层使用网桥扩展局域网</h2><ul>
<li><p>网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发。</p>
</li>
<li><p>网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口 </p>
<p>使用网桥带来的好处 </p>
<ul>
<li>过滤通信量。 </li>
<li>扩大了物理范围。</li>
<li>提高了可靠性。</li>
<li>可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb/s 和 100 Mb/s 以太网）的局域网。</li>
</ul>
<p>使用网桥带来的缺点</p>
<ul>
<li>存储转发增加了时延。 </li>
<li>在MAC 子层并没有流量控制功能。 </li>
<li>具有不同 MAC 子层的网段桥接在一起时时延更大。</li>
<li>网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。  </li>
</ul>
<p><img src="/2020/05/15/mac/zhuan.png" alt></p>
<hr>
<h2 id="网桥和集线器（或转发器）不同"><a href="#网桥和集线器（或转发器）不同" class="headerlink" title="网桥和集线器（或转发器）不同"></a>网桥和集线器（或转发器）不同</h2><ul>
<li>集线器在转发帧时，不对传输媒体进行检测。</li>
<li>网桥在转发帧之前必须执行 CSMA/CD 算法。<br>  若在发送过程中出现碰撞，就必须停止发送和进行退避。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h2><p>目前使用得最多的网桥是透明网桥(transparent bridge)。<br>网桥算法</p>
<pre><code>1.若从 A 发出的帧从接口 x 进入了某网桥，那么从这个接口出发沿相反方向一定可把一个帧传送到 A。
2.网桥每收到一个帧，就记下其源地址和进入网桥的接口，作为转发表中的一个项目。
3.在建立转发表时是把帧首部中的源地址写在“地址”这一栏的下面。
4.在转发帧时，则是根据收到的帧首部中的目的地址来转发的。这时就把在“地址”栏下面已经记下的源地址当作目的地址，而把记下的进入接口当作转发接口。</code></pre><p><img src="/2020/05/15/mac/qiao.png" alt><br><strong>网桥在转发表中登记以下三个信息</strong></p>
<pre><code>在网桥的转发表中写入的信息除了地址和接口外，还有帧进入该网桥的时间。</code></pre><p><strong>转发帧</strong>：查找转发表中与收到帧的目的地址有无相匹配的项目。</p>
<ul>
<li><p>如没有，则通过所有其他接口（但进入网桥的接口除外）按进行转发。</p>
</li>
<li><p>如有，则按转发表中给出的接口进行转发。</p>
</li>
<li><p>若转发表中给出的接口就是该帧进入网桥的接口，则应丢弃这个帧（因为这时不需要经过网桥进行转发）。<br>透明网桥使用了生成树算法：这是为了避免产生转发的帧在网络中不断地兜圈子。 </p>
</li>
<li><p>在任何两个站之间只有一条路径。</p>
<h2 id="多接口网桥——以太网交换机"><a href="#多接口网桥——以太网交换机" class="headerlink" title="多接口网桥——以太网交换机"></a>多接口网桥——以太网交换机</h2></li>
<li><p>以太网交换机的每个接口都直接与主机相连，并且一般都工作在全双工方式。</p>
</li>
<li><p>交换机能同时连通许多对的接口，使每一对相互通信的主机都能像独占通信媒体那样，进行无碰撞地传输数据。 </p>
</li>
<li><p>以太网交换机由于使用了专用的交换结构芯片，其交换速率就较高。    </p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2020/06/14/redis/</url>
    <content><![CDATA[<ul>
<li>redis的数据类型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string:(ket___values)类型</span><br><span class="line">hash:(key__(key__values))类型</span><br><span class="line">list:(key的values以双向链表连接起来)类型</span><br><span class="line">set:(去掉重复，无序是一个key对应的values)</span><br><span class="line">zset:(没有重复，有序,一个key对应多个values)</span><br></pre></td></tr></table></figure></li>
<li>性能高，存在内存中<br>所以持久化差（可以通过AOF,RDB来进行持久化处理）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AOF:是通过每一次对数据库进行改变的操作都会存在文件中，所以文件大，执行起来比较困难</span><br><span class="line">RDB:是通过快照来实现持久化的，他的文件小（默认）</span><br></pre></td></tr></table></figure></li>
<li>redis做缓存<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XXXXXXXXXX</span><br><span class="line">其中会有mysql的加锁的机制</span><br></pre></td></tr></table></figure>
缓存雪崩：大多数redis中的key都过期产生的现象。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.设置随机过期时间（24+随机数）</span><br><span class="line">2.保证redis集群的高可用，选择合适的内存淘汰机制，淘汰掉过期的数据</span><br><span class="line">3.在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量</span><br></pre></td></tr></table></figure>
缓存穿透：是指缓存和数据库中都没有的数据，而用户不断发起请求<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;&#x3D;0的直接拦截；</span><br><span class="line">从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</span><br></pre></td></tr></table></figure></li>
<li>redis批量操作-事务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">multi：开启事务用于标记事务的开始，其后执行的命令都将被存入命令队列，直到执行EXEC时，这些命令才会被原子的执行，类似与关系型数据库中的：begin transaction</span><br><span class="line">exec：提交事务，类似与关系型数据库中的：commit        执行批量化</span><br><span class="line">discard：事务回滚，类似与关系型数据库中的：rollback     不执行批量化操作</span><br></pre></td></tr></table></figure></li>
<li>redis事务的检查机制：<br>固定检查和惰性检查</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ppp协议</title>
    <url>/2020/05/14/ppp%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="点对点协议PPP-现在全世界使用得最多的数据链路层协议是点对点协议-PPP"><a href="#点对点协议PPP-现在全世界使用得最多的数据链路层协议是点对点协议-PPP" class="headerlink" title="点对点协议PPP:现在全世界使用得最多的数据链路层协议是点对点协议 PPP"></a>点对点协议PPP:现在全世界使用得最多的数据链路层协议是点对点协议 PPP</h2><p><strong>用户使用拨号电话线接入因特网时，一般都是使用 PPP 协议</strong><br>   PPP 协议有三个组成部分 </p>
<ul>
<li><p>一个将 IP 数据报封装到串行链路的方法。</p>
</li>
<li><p>链路控制协议 LCP (Link Control Protocol)。</p>
</li>
<li><p>网络控制协议 NCP (Network Control </p>
<pre><code>标志字段 F = 0x7E （符号“0x”表示后面的字符是用十六进制表示。十六进制的 7E 的二进制表示是 01111110）。
地址字段 A 只置为 0xFF。地址字段实际上并不起作用。
控制字段 C 通常置为 0x03。
PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。

PPP 有一个 2 个字节的协议字段。
当协议字段为 0x0021 时，PPP 帧的信息字段就是IP 数据报。
若为 0xC021, 则信息字段是 PPP 链路控制数据。
若为 0x8021，则表示这是网络控制数据。       </code></pre></li>
</ul>
<p>   <strong>帧格式</strong><br>   <img src="/2020/05/14/ppp%E5%8D%8F%E8%AE%AE/ppp.png" alt><br>   <strong>透明传输问题</strong></p>
<ul>
<li><p>当 PPP 用在同步传输链路时，协议规定采用硬件来完成比特填充。</p>
<pre><code>PPP 协议用在 SONET/SDH 链路时，是使用同步传输（一连串的比特连续传送）。这时 PPP 协议采用零比特填充方法来实现透明传输。
在发送端，只要发现有 5 个连续 1，则立即填入一个 0。
接收端对帧中的比特流进行扫描。每当发现 5 个连续1时，就把这 5 个连续 1 后的一个 0 删除。</code></pre></li>
<li><p>当 PPP 用在异步传输时，就使用一种特殊的字符填充法。</p>
<pre><code>将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列(0x7D, 0x5E)。 
若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列(0x7D, 0x5D)。
若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变。  
</code></pre></li>
</ul>
<hr>
<h2 id="不提供使用序号和确认的可靠传输"><a href="#不提供使用序号和确认的可靠传输" class="headerlink" title="不提供使用序号和确认的可靠传输"></a>不提供使用序号和确认的可靠传输</h2><ul>
<li>在数据链路层出现差错的概率不大时，使用比较简单的 PPP 协议较为合理。</li>
<li>在因特网环境下，PPP 的信息字段放入的数据是 IP 数据报。数据链路层的可靠传输并不能够保证网络层的传输也是可靠的。</li>
<li>帧检验序列 FCS 字段可保证无差错接受。</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>七层协议</title>
    <url>/2020/05/12/%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h2><hr>
<ul>
<li>应用层<br>应用层：最靠近用户的一层，为用户提供接口和各种网络服务，HTTP HTTPS FTP POP3 SMTP等<br>Eg:A的老板想要发送一个财务分析报表，这个报表就是应用层提供的一种网络服务。</li>
<li>表示层<br>表示层：对应用层数据进行编码和转换，保证一系统的应用层发送的数据能够被另一个系统的应用层所识别。必要时可以其进行加密，压缩等。<br>Eg:例如AB两个公司用英语进行通信，表示层的作用就是传递的信息转换成英语，同时为了防止其他公司看到，会进行加密处理。</li>
<li>会话层<br>会话层：建立，管理终止，表示层之间的通信会话。<br>Eg：会话层接收到表示层发过来数据时，他会根据器信息建立并记录本次会话，他首先找到B公司的地址信息，然后将所有信息放在一个信封中，加上地址和电话号，将他寄出，等到B公司收到后会终止本次会话。</li>
<li>传输层<br>传输层：建立了主机端到端的链接，他的作用就是为上层提供端到端的服务。<br>Eg:就是公司中负责快递收发的人，公司自己的投递员，负责将上一层要传递的资料传递给邮局或公司。</li>
<li>网络层<br>网络层：通过ip寻址建立两点之间的链接，为远端运输层送来的数据进行分组，选择合适的路由和交换节点，正确无误的将地址传送个目的端的运输层。这一层就是ip层，也就是internet的基础。<br>Eg：网络层相当于快递公司的庞大快递网络，通过一些集散中心到达目的地，这里的集散器就是ip节点。</li>
<li>数据链路层<br>数据链路层：将比特组合成字节，将字节再组合成帧，使用链路层地址（以太网的mac地址）来访问介质，进行差错检测。<br>逻辑链路控制子层（LLC）和媒体访问控制子层（MAC）。</li>
<li>网络层<br>网络层：实现最终的信号传输，通过物理介质传送比特流。常用的设备有集线器，中继器，调制解调器，网线，双绞线，同轴电缆。<br>Eg交通工具相当于物理层，eg火车，飞机，汽车等。</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>函数调用时用到的寄存器</title>
    <url>/2020/05/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="函数调用所要进行的操作"><a href="#函数调用所要进行的操作" class="headerlink" title="函数调用所要进行的操作"></a>函数调用所要进行的操作</h2><hr>
<ul>
<li>EBP<br>EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。</li>
<li>ESP<br>ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。</span><br><span class="line">下一步，foo必须为它的局部变量分配空间，同时，也必须为它可能用到的一些临时变量分配空间。</span><br><span class="line">sub esp, 0cch；减去的值根据程序而定</span><br><span class="line">之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）</span><br><span class="line">之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了</span><br><span class="line">在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作</span><br></pre></td></tr></table></figure></li>
<li>EBX<br>EBX：”基地址”(base)寄存器, 在内存寻址时存放基地址。</li>
<li>ESI<br>ESI/EDI分别叫做”源/目标索引寄存器”(source/destination index),因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串.</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/TuxedoLinux/article/details/100921994" target="_blank" rel="noopener">https://blog.csdn.net/TuxedoLinux/article/details/100921994</a></p>
<p><a href="https://blog.csdn.net/zhu2695/article/details/16813425" target="_blank" rel="noopener">https://blog.csdn.net/zhu2695/article/details/16813425</a></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>数据链路层</title>
    <url>/2020/05/14/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<h2 id="数据链路层的两种类型"><a href="#数据链路层的两种类型" class="headerlink" title="数据链路层的两种类型"></a>数据链路层的两种类型</h2><p>   <strong>数据链路层传送的是帧</strong></p>
<ul>
<li>点对点通信：这种信道使用一对一的点对点通信方式。<pre><code>链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。
一条链路只是一条通路的一个组成部分。
数据链路(data link)除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。
现在最常用的方法是使用适配器（即网卡）来实现这些协议的硬件和软件。
一般的适配器都包括了数据链路层和物理层这两层的功能。   </code></pre></li>
<li>广播信道：这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送 </li>
</ul>
<hr>
<h2 id="数据链路层的简单模型"><a href="#数据链路层的简单模型" class="headerlink" title="数据链路层的简单模型"></a>数据链路层的简单模型</h2><h2 id><a href="#" class="headerlink" title="   "></a>   <img src="/2020/05/14/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/wang.png" alt></h2><h2 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h2><ul>
<li><p>封装成帧<br>封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。<br>首部和尾部的一个重要作用就是进行帧定界<br><img src="/2020/05/14/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/zhen.png" alt></p>
</li>
<li><p>透明传输<br><img src="/2020/05/14/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/tou.png" alt><br>解决透明传输的问题</p>
<pre><code>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(其十六进制编码是 1B)。
字节填充(byte stuffing)或字符填充(character stuffing)
——接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。
如果转义字符也出现数据当中，那么应在转义字符前面插入一个转义字符。
——当接收端收到连续的两个转义字符时，就删除其中前面的一个。</code></pre><p><img src="/2020/05/14/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/fufu.png" alt> </p>
</li>
<li><p>差错控制<br>在传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。<br>在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率 BER (Bit Error Rate)。<br>误码率与信噪比有很大的关系。<br>为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。 </p>
<h2 id="在数据链路层传送的帧中，广泛使用了循环冗余检验-CRC-的检错技术。"><a href="#在数据链路层传送的帧中，广泛使用了循环冗余检验-CRC-的检错技术。" class="headerlink" title="在数据链路层传送的帧中，广泛使用了循环冗余检验 CRC 的检错技术。"></a>在数据链路层传送的帧中，广泛使用了循环冗余检验 CRC 的检错技术。</h2><pre><code>在发送端，先把数据划分为组。
假定每组 k 个比特。 
假设待传送的一组数据 M = 101001（现在 k = 6）。
我们在 M 的后面再添加供差错检测用的 n 位冗余码一起发送。  

用二进制的模 2 运算进行 2n 乘 M 的运算，这相当于在 M 后面添加 n 个 0。
得到的 (k + n) 位的数除以事先选定好的长度为 (n + 1) 位的除数 P，得出商是 Q 而余数是 R，余数 R 比除数 P 少1 位，即 R 是 n 位。 
</code></pre><p><img src="/2020/05/14/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/crc.png" alt> </p>
<h2 id="帧检验序列-FCS"><a href="#帧检验序列-FCS" class="headerlink" title="帧检验序列 FCS"></a>帧检验序列 FCS</h2><pre><code>在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。
循环冗余检验 CRC 和帧检验序列 FCS并不等同。
CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。
FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。  

(1) 若得出的余数 R = 0，则判定这个帧没有差错，就接受(accept)。
(2) 若余数 R  0，则判定这个帧有差错，就丢弃。
- 但这种检测方法并不能确定究竟是哪一个或哪几个比特出现了差错。
- 只要经过严格的挑选，并使用位数足够多的除数 P，那么出现检测不到的差错的概率就很小很小。 </code></pre></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>物理层</title>
    <url>/2020/05/14/%E7%89%A9%E7%90%86%E5%B1%82/</url>
    <content><![CDATA[<h2 id="物理层的传输媒体"><a href="#物理层的传输媒体" class="headerlink" title="物理层的传输媒体"></a>物理层的传输媒体</h2><hr>
<pre><code> - 双绞线
   屏蔽双绞线和无屏蔽双绞线。
- 同轴电缆

- 光缆
   在纤芯中不断的全反射 
   分为多模光纤和单模光纤
</code></pre><hr>
<h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><ul>
<li>频分复用<br>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<br>频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）</li>
<li>时分复用<br>时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。<br>每一个用户所占用的时隙是周期性地出现（其周期就是 TDM  帧的长度）<br>TDM 信号也称为等时(isochronous)信号<br>时分复用的所有用户是在不同的时间占用同样的频带宽度。<br> <img src="/2020/05/14/%E7%89%A9%E7%90%86%E5%B1%82/hexo.png" alt><br> 但是有可能造成线路资源的浪费<br> <img src="/2020/05/14/%E7%89%A9%E7%90%86%E5%B1%82/shi.png" alt></li>
<li>统计时分复用<br> 解决了时分复用的问题<br> <img src="/2020/05/14/%E7%89%A9%E7%90%86%E5%B1%82/cao.png" alt></li>
<li>码分复用 CDM<br> 常用的名词是码分多址 CDMA<br> 各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。<br> 这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。<br> 每一个比特时间划分为 m 个短的间隔，称为码片(chip)。<pre><code>每个站被指派一个唯一的 m bit 码片序列。
如发送比特 1，则发送自己的 m bit 码片序列。
如发送比特 0，则发送该码片序列的二进制反码。 
例如，S 站的 8 bit 码片序列是 00011011。
发送比特 1 时，就发送序列 00011011，
发送比特 0 时，就发送序列 11100100。
S 站的码片序列：(–1 –1 –1 +1 +1 –1 +1 +1)</code></pre></li>
</ul>
<hr>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>路由</title>
    <url>/2020/05/20/%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="路由算法的自适应性考虑"><a href="#路由算法的自适应性考虑" class="headerlink" title="路由算法的自适应性考虑"></a>路由算法的自适应性考虑</h2><ul>
<li>静态路由选择策略——即非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。 适用于小型网络</li>
<li>动态路由选择策略——即自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。  </li>
</ul>
<pre><code>自治系统 AS 的定义：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由
同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。
现在对自治系统 AS 的定义是强调下面的事实：尽管一个 AS 使用了多种内部路由选择协议和度量，
但重要的是一个 AS 对其他 AS 表现出的是一个单一的和一致的路由选择策略。
</code></pre><h2 id="因特网有两大类路由选择协议"><a href="#因特网有两大类路由选择协议" class="headerlink" title="因特网有两大类路由选择协议"></a>因特网有两大类路由选择协议</h2><ul>
<li>内部网关协议 IGP (Interior Gateway Protocol)    即在一个自治系统内部使用的路由选择协议。目前这类路由选择协议使用得最多，如 RIP 和 OSPF 协议。</li>
<li>外部网关协议EGP (External Gateway Protocol)    若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。这样的协议就是外部网关协议 EGP。在外部网关协议中目前使用最多的是 BGP-4。  </li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>网络层</title>
    <url>/2020/05/17/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<h2 id="中间设备又称为中间系统或中继-relay-系统。"><a href="#中间设备又称为中间系统或中继-relay-系统。" class="headerlink" title="中间设备又称为中间系统或中继(relay)系统。"></a>中间设备又称为中间系统或中继(relay)系统。</h2><pre><code>物理层中继系统：转发器(repeater)，中继器，集线器。
数据链路层中继系统：网桥或桥接器(bridge)。
网络层中继系统：路由器(router)。
网桥和路由器的混合物：桥路器(brouter)。
网络层以上的中继系统：网关(gateway)。  </code></pre><p><img src="/2020/05/17/%E7%BD%91%E7%BB%9C/1.png" alt></p>
<p>IP 地址与硬件地址<br><img src="/2020/05/17/%E7%BD%91%E7%BB%9C/3.png" alt></p>
<hr>
<h2 id="分类-IP-地址"><a href="#分类-IP-地址" class="headerlink" title="分类 IP 地址"></a>分类 IP 地址</h2><p>每一类地址都由两个固定长度的字段组成，其中一个字段是网络号 net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号 host-id，它标志该主机（或路由器）。<br><strong>在同一个局域网上的主机或路由器的IP 地址中的网络号必须是一样的。</strong><br><strong>路由器总是具有两个或两个以上的 IP 地址。路由器的每一个接口都有一个不同网络号的 IP 地址。</strong></p>
<hr>
<ul>
<li>A类网以0开头，网络号占一个字节，主机号占3个字节.</li>
<li>B类网以10开头，网络号占两个字节，主机号占两个字节.</li>
<li>C类网以110开头，网络号占三个字节，主机号占一个字节.<br>使用点分十进制法显示，将8位变成十进制。<br><img src="/2020/05/17/%E7%BD%91%E7%BB%9C/wangluo.png" alt></li>
</ul>
<h2 id="常用的三种类别的-IP-地址的使用范围"><a href="#常用的三种类别的-IP-地址的使用范围" class="headerlink" title="常用的三种类别的 IP 地址的使用范围"></a>常用的三种类别的 IP 地址的使用范围</h2><p><img src="/2020/05/17/%E7%BD%91%E7%BB%9C/2.png" alt><br>路由器只根据目的站的 IP 地址的网络号进行路由选择,并不会改变源地址和目的地址<br>在具体的物理网络的链路层，只能看见 MAC 帧而看不见 IP 数据报</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
  <entry>
    <title>停止等待协议和连续arq协议</title>
    <url>/2020/05/14/%E8%BF%9E%E7%BB%ADarq%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="停止等待协议的工作特点："><a href="#停止等待协议的工作特点：" class="headerlink" title="停止等待协议的工作特点："></a>停止等待协议的工作特点：</h2><p>   单工的工作方式<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在同一时间内只能发送一个数据帧</span><br><span class="line">没有错误发送ACK，有错误发送NAK</span><br><span class="line">在收到确认帧是发送方发送下一个帧，收到否认帧时重新发送，所以说用一个编号就可以控制</span><br><span class="line">它会设置一个计时器，这个数值的大小要大于往返时延</span><br></pre></td></tr></table></figure><br>   算法描述<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发方程序：</span><br><span class="line">(1)   从主机取一个数据帧，送交发送缓存。</span><br><span class="line">(2)   V(S)←0。 </span><br><span class="line">(3)   N(S)←V(S)。</span><br><span class="line">(4)   将发送缓存中的数据帧发送出去。 </span><br><span class="line">(5)   设置超时计时器。</span><br><span class="line">(6)   等待。 </span><br><span class="line">(7)   收到确认帧 ACKn，   </span><br><span class="line">        若 n &#x3D; 1 – V(s)，则：</span><br><span class="line">           从主机取一个新的数据帧，放入发送缓存；</span><br><span class="line">           V(S)←[1 – V(S)]，转到 (3)。    </span><br><span class="line">        否则，丢弃这个确认帧，转到(6)。 </span><br><span class="line">(8)   若超时计时器时间到，则转到(4)。</span><br><span class="line">收方程序：</span><br><span class="line">(1)   V(R)←0。</span><br><span class="line">(2)   等待。</span><br><span class="line">(3)   收到一个数据帧；</span><br><span class="line">        若 CRC校验无误</span><br><span class="line">          若 N(S) &#x3D; V(R)，则执行(4)；</span><br><span class="line">          否则丢弃此数据帧，然后转到(6)。</span><br><span class="line">        否则丢弃此数据帧，然后转到(2)。</span><br><span class="line">(4)   将收到的数据帧中的数据部分送交上层软件</span><br><span class="line">(5)   V(R)←[1 – V(R)]。</span><br><span class="line">(6)   n←V(R)；</span><br><span class="line">      发送确认帧 ACKn，转到(2)。</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="arq工作特点："><a href="#arq工作特点：" class="headerlink" title="arq工作特点："></a>arq工作特点：</h2><p>   全双工的工作方式<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以连续发送多个数据帧</span><br><span class="line">ackn:标识对前面的n-1号帧进行确认，并且希望收到n号帧</span><br><span class="line">因为是按序接受的，不按序正确也不要，所以</span><br><span class="line">如果发送方发送三个数据帧，接收方只接受到第三个确认帧，那么它也可以确定前两个数据帧已经接收成功，可以发送下一帧</span><br><span class="line">它也会设置一个计时器，这个数值的大小要大于往返时延</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h2><p>   通常由接收方对发送方进行流量控制，发送方自己也会控制</p>
<h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><ul>
<li>发送方 WT：<br>只能发送WT大小的值，并且有计时机制，如果在这个时间内没有收到则会重传窗口内的值，只有接收到窗口内的确认信号才可以滑动窗口</li>
<li>接收方 WR：<br>只能接受窗口的大小的帧，收到后会移动窗口并且发送确认帧<br>WT&lt;=2的n次幂-1<br>WR&lt;=2的n-1次幂<br>WT+WR&lt;=2的n次幂</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
</search>
