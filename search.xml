<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>函数调用时用到的寄存器</title>
    <url>/2020/05/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="函数调用所要进行的操作"><a href="#函数调用所要进行的操作" class="headerlink" title="函数调用所要进行的操作"></a>函数调用所要进行的操作</h2><hr>
<ul>
<li>EBP<br>EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。</li>
<li>ESP<br>ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在函数调用之前，将调用者的函数（caller）的ebp存入栈，以便于在执行完毕后恢复现场是还原ebp的值。</span><br><span class="line">下一步，foo必须为它的局部变量分配空间，同时，也必须为它可能用到的一些临时变量分配空间。</span><br><span class="line">sub esp, 0cch；减去的值根据程序而定</span><br><span class="line">之后会根据情况看是否保存某些特定的寄存器（EBX，ESI和EDI）</span><br><span class="line">之后ebp的值会保持固定。此后局部变量和临时存储都可以通过基准指针EBP加偏移量找到了</span><br><span class="line">在函数执行完毕，控制流返回到调用者的函数（caller）之前会进行下述操作</span><br></pre></td></tr></table></figure></li>
<li>EBX<br>EBX：”基地址”(base)寄存器, 在内存寻址时存放基地址。</li>
<li>ESI<br>ESI/EDI分别叫做”源/目标索引寄存器”(source/destination index),因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串.</li>
</ul>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/TuxedoLinux/article/details/100921994" target="_blank" rel="noopener">https://blog.csdn.net/TuxedoLinux/article/details/100921994</a></p>
<p><a href="https://blog.csdn.net/zhu2695/article/details/16813425" target="_blank" rel="noopener">https://blog.csdn.net/zhu2695/article/details/16813425</a></p>
]]></content>
      <categories>
        <category>c++</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
